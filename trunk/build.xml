<!-- Ant build file for MiniConnectionPoolManager -->
<project name="miniConnectionPoolManager" default="package">

<property environment="env"/>

<!-- Main targets ===========================================================-->

<target name="clean" description="Deletes the target directory.">
 <delete dir="target" failonerror="true"/>
</target>

<target name="compile" description="Compiles the main source files.">
 <mkdir dir="target/classes"/>
 <javac srcdir="src/main/java" destdir="target/classes"
    deprecation="true" includeAntRuntime="false" debug="true" debuglevel="lines,source"
    source="1.6" target="1.6">
  <compilerarg line="-Xlint -Xlint:-path -Xlint:-options -Xmaxerrs 5 -Xmaxwarns 5"/>
 </javac>
</target>

<target name="package" depends="compile" description="Builds the JAR file.">
 <jar destfile="target/miniconnectionpoolmanager.jar">
  <fileset dir="target/classes"/>
 </jar>
</target>

<target name="javaDoc" description="Generates the API documentation (JavaDoc)">
 <delete dir="target/javadoc" failonerror="true"/>
 <mkdir dir="target/javadoc"/>
 <javadoc sourcepath="src/main/java" destdir="target/javadoc" failonerror="true"
    link="https://docs.oracle.com/javase/7/docs/api/"/>
</target>

<!-- Examples ===============================================================-->

<target name="compileExamples" depends="package, getExampleDependencies" description="Compiles the example source files.">
 <mkdir dir="target/example-classes"/>
 <javac srcdir="src/examples" destdir="target/example-classes"
    deprecation="true" includeAntRuntime="false" debug="true" debuglevel="lines,source"
    source="1.6" target="1.6">
  <compilerarg line="-Xlint -Xlint:-path -Xlint:-options -Xmaxerrs 5 -Xmaxwarns 5"/>
  <classpath>
   <pathelement location="target/miniconnectionpoolmanager.jar"/>
   <pathelement location="target/h2.jar"/>
   <!-- <pathelement location="target/sqljdbc4.jar"/> -->
   <!-- <pathelement location="target/sqlite-jdbc-3.14.2.1.jar"/> -->
  </classpath>
 </javac>
</target>

<target name="runSimpleTest" depends="compileExamples">
 <java classname="SimpleTest" fork="true">
  <classpath>
   <pathelement location="target/example-classes"/>
   <pathelement location="target/miniconnectionpoolmanager.jar"/>
   <pathelement location="target/h2.jar"/>
  </classpath>
 </java>
</target>

<target name="runSpeedTest" depends="compileExamples">
 <java classname="SpeedTest" fork="true">
  <classpath>
   <pathelement location="target/example-classes"/>
   <pathelement location="target/miniconnectionpoolmanager.jar"/>
   <pathelement location="target/h2.jar"/>
  </classpath>
 </java>
</target>

<!-- External dependencies for the example programs =========================-->

<property name="extH2JarFileVersion"    value="1.2.147"/>
<property name="extH2JarFileUrl"        value="http://repo1.maven.org/maven2/com/h2database/h2/${extH2JarFileVersion}/h2-${extH2JarFileVersion}.jar"/>

<target name="getExampleDependencies" description="Retrieves the required library JAR files for the xamples and stores them in the target directory"
   depends="getH2JarFile">
</target>

<target name="getH2JarFile" unless="h2JarFileExists" depends="setH2JarFileExists">
 <mkdir dir="target/classes"/>
 <get src="${extH2JarFileUrl}" dest="target/h2.jar"/>
    <!-- The "skipexisting" option of the "get" task emmits a warning message, so we don't use it and use the setH2JarFileExists target instead. -->
</target>
<target name="setH2JarFileExists">
 <available property="h2JarFileExists" file="target/h2.jar"/>
</target>

<!-- Website update =========================================================-->

<target name="buildDistribZip" description="Builds the distribution ZIP file.">
 <antcall target="clean"/>
 <antcall target="package"/>
 <antcall target="javaDoc"/>
 <zip destfile="target/miniConnectionPoolManager.zip">
  <zipfileset dir="."
   includes="build.xml, CHANGES.txt, README.txt, MiniConnectionPoolManager.html, src/, target/miniconnectionpoolmanager.jar, target/javadoc/"/>
 </zip>
</target>

<target name="updateWebsite">
 <fail unless="env.miniConnectionPoolManagerWebsiteDir" message="Undefined website directory."/>
 <property name="websiteDir" location="${env.miniConnectionPoolManagerWebsiteDir}"/>
 <antcall target="buildDistribZip"/>
 <copy todir="${websiteDir}" overwrite="true">
  <fileset dir="src/main" includes="**/*.java"/>
  <chainedmapper>
   <flattenmapper/>
   <mapper>
    <globmapper from="*.java" to="*.java.txt"/>
    <identitymapper/>
   </mapper>
  </chainedmapper>
 </copy>
 <delete dir="${websiteDir}/javadoc" failonerror="true"/>
 <copy todir="${websiteDir}" overwrite="true">
  <fileset dir="target" includes="miniConnectionPoolManager.zip, javadoc/"/>
 </copy>
</target>

</project>
